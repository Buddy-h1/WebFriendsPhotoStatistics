<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAAoEgAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgEAAAA9ntg7QAAAAFv
        ck5UAc+id5oAABHiSURBVHja7V17dFfVmd2AQIhkeERtBaoYqA/CMEpFELQVUARpBQVEUGsRELXIIxbb
        8hgcCWht7YyCFNtlu2DWUokzYyvSZUA6BUmhyMMBRBrAJe8V0JBAiHl/890JHYMGcu895957zsm39x/i
        Pzn37L1/955zz3fOBQQCgUAgEAgEAoFAIBAIBAKBIF40Q0ukIR0dkYFu6Im+6I/BGIZRGIsHMR6T8Bgm
        YwqmYpqBnMpXNpmvcBJf6YN8xaP4ygdzD/pyTzLRhXuVzr1L4V7Wg1aN0O4WaIfLWZxBuA/TMR8vIwe5
        2IDt2IuDKMAJnEIpylGJatSALGMNX3UlX30p9+IEjuEQ92o7924V3uCeLuAe388974nOrEKLxmN6Cjrg
        eozEk/gV3sYWfIJClFlor56IlHE09mMrVmIJfsx3jF58l0hxxOlWZ9/av4YbMQEvcP7zudNVjdLwhliF
        IuzBaryIiazW1+t/VFiAy+r+Tzr6IQuv40MUi8UBeBK7+IGYhZtYwf9HR5tGc3yrH46FfHs7KXYqBWEb
        FuEudGhquuVzv/hnG9yOlzjB5WKgJlbgI1Z0MNqa/9PP4OnQeh75imn6WYo8njtkmGt+NzzDUx0xKlru
        xbPINM/8rjyzPSD2xMSD/FPrao75bTGFJ3diS7zMx1QzxgQ389y+WgxJgNWs/M3Jmt8aM1AgViTIAjzJ
        LjCaJGB/Z7wm7/QMeH/4Gq5I4tffCxtEfkO4ETfEbf+tMuwzbEh4W5z2D8F+Ed0w7mdXosaZgcZAsd/Q
        CAyMYzh4PXaL2IZyN7vDaB7pWm+eCG0w885ejdeNVCwTkQ3nMnYpMkxDpUhsOCvZpYjQB0dEYAt4GL2j
        sD8NK0RcS7iC3dJe6/Ow3P4tegxM/FKVlobR/w4R1iLu0D0bmC2iWsbZOu3vIqVe1nEPu6YNs0RQCzlL
        l/0dsFPktJA72TktmCAlX5aWjE1Qrvj6v9e/uSKmpczV8Vq4H4pESktZxO4pY4EIaTEXqNrfHptFRov5
        PjuohAE4LTJazBJ2UAnZIqLlnKc2DVgrElrOtbWTuXDogWMioeU8xi6GxrhGenyTS6xhF0NjiQjoAJeE
        tb8NNop8DnAjOxkKmbLz1wkWhD1RZIQUgTnBSnYyZDGgiOcGQxUHNkOOSOcIc8KcOtoOW0Q6R7g5zGlC
        V8k2EGd4BFcGD8BAOe7RGZaGWRIaL8I5xIdkHVDWBAMeBiIbwV3isqAHh7TCGpHNIa4J+lGii2QvoFPc
        wY4GPPz5kMjmEA8F3SjWS4rBnWIROxrwJED53odLLMfgYAF4QGqBnGINOxro+LjpIppjnAZcGOA80Pki
        mWPMDvYIWCySOcbFQexvitdEMsf4KgJ8erAFVopkjnFlkE9Up2KdSOYY1wY5K6CtVAM5xy1BqoIuwS6R
        zDHuYld9oxP2iWSOcR+7GuBcQFkKatTLQd1kT5BzLMA1/gNwLQpFMsdYyK76xg0oFskcY3GQbwvehBKR
        zDGWsKsBjoaSPQGusRT9/QdgEMpEMsdYxq76xlBURHERF1ArSm2QKdRMQ1tNfLVVH5tH0PPmvlpuyVcd
        WQAqcIf/AAzTfTJACg2i5+i/6E+0tkGuoRyaS72paejWWtBw+h23tc5Ha1/lCppPPbT1/GIaTQv5b/7Z
        R8u5tJQepyuiCUAlu+obd+v9LHwbWkynKRg+pafpwpD2Z1MpqWEf3aKl50NpI1UGbPtDGhhFAKrYVd8Y
        pTcAU0OZUE3/Euou8D1l+z28EzJ+dXkPHQ/Vdh61jyIAI/0HYLTOLwSk8k09HE5Q/xDtLSIdKKSeiv3+
        R/o4ZNvFdIP+AFSzq74xRmcAvk67Q9uQwzf0oO29oiUAVTRKqddNaUnotk/TzVEE4N4gAagxIwCfhfgt
        PEZ68KhSr7vTkdAtH6Wr9Qeghl31jbE6A9Can2nhMS9wex1ok5YAZCn1+imFlt9jzSIIwNiEAtCUXlUQ
        Y1OIAdHtIQdf+gLQkcfy4fFcFLOA5AIAmqUgxmm6LUSLU6g80QA8SjUx99joAHxXyY4XQrTYkn6dYADa
        0waFdv9CbV0LQAbtVxDkI76hBm/zMtqaWADuC/zyR9/Yw8gAtKQ/KghSSWNCtTqWyhIJQFro9x4e9vLP
        xbkAgGYqWfFGqAWaNHo3kQCMVAregqgWg5INwLfplIIoBfRPoVodR9WxB6A15Sq0eYCucTMA7Wmz0q9x
        TqhWL6d9sQdghNLv/9noloOTDQDoF0oB2EIXh2izGS2POQBptFqhxY/pKncDMEhpja6CRodq9YmYAzBG
        acI7Jzr7kw9AuuJD4E2eSwRvdYiCIcED0I7WKfRwB33D5QCA5isuz/YNtSR7PMYATKQqhdXHR6KtCUw+
        AH2pSCkCL4ZosxPPq+MKwKW0TaF3/833D8cDkEqrlAKwP8QQqT39T2wB+IlC30roe1FXBScfAG+JRA2z
        QzyVt8UUgKtD1/94WBqi8MXCAGQoiUS0M/CqQFwBaEoLFfp1MOSLLusCoFqvV0OTDQ3ALTxIDY+ZcWwM
        MSMA36FipQhsoosMDEAava3Qp7xQL7ksDUArWqlYqjnewABMVFj+PUV3xrM1zIwAqK6Ve+US7Q0LQFf6
        SKE/v4lkK5rBAbhY8Y1gFY0zKgAX0GKF3uRH+fbfzACAhVXDBko3KAB30kmFUpdJ8e0ONicAnTn3KqgO
        IFvUAeioVIL+hyjKv80PAOhpxXvAVrrUiAA0o+cVenGEesdnv1kBuFqpSNTDDCMCMEzh9l9DP43TfrMC
        APq5YgDyeeyddACuoA8UerAmih3A9gSgOx1SjMDPEw5ACv1O4eo/1XT+gLUBAP1SMQAFvp6g0QXgh1Sh
        cPVPx22/eQHoTgcVI7Ccf4VJBeAWOqpw5e/RJRIA0M8UA/C5jzrBaAKQQe8rXPdn0ez9sy8AVyouDhPb
        0CGBALShHKWrzo7yLDCbAgCaQ6rIjj0AzXn4WaNwxeuSuP2bGoDLaKdiAI7Tt2MNQBOarrTx41MakIz9
        ZgYANFlp85aHVectptQbgCb0sGI9w9yk7Dc1AOm0XjEANTQrogDM/sqL38cV3vx5WB1gGauRBMDbS/u5
        YgSOneelikoAlp41WEuhmYEPu/zyu/++ydlvbgBa0X8oDwXXn3NxSCUA+XR5nZr/xUovfrw6hieStN/c
        AHgbRtSPdFp0jrLqdkqbNRZSW2pK7WkE/UX5Ct+kNAlA/WyiuHPYQ9k5agTUAlBJeXx/2qr8kPL2/fZI
        1n6TA+Ctq32oLPFRurXenUEfUPKoClzO3sgCAJqgWCrqYWc9vzKVrWH68F7U+/7sD0BrWqFB6PVfqRLo
        SHsMCIABv3/TAwDqx9M5dayhLl9aczyeuP2RHP3sXgBA2VrkXk/X1fmb92h4tKgPUIdIAPzwUvqrFsH3
        0ANnPvbQjt4iE/BvEgB/vFPpMLm6v7lVNJOepHcUTuzQiaPURwLgb5fNS+QmVie1CGxXALw3AtsdjcDL
        lCoB8MN7FJdcTEUV/SzUOWeNLgDNFb61YzYqeJ7TUgLgZ+/gB85GYJ6PSuZGHwDQXZpmAyZG4BlqJQFo
        eNPlL8lVVNJzyQwHbQqA91JovbMRqKLnk4iAXQEA9deyNmBqBH4RfwRsCwDox8oVw2ZPClMkAOdnGv0n
        kcNjgafiOh7K1gCArtFQKaSKGh65R7OiWEZZcW4SszEA3vJQYYLmH6dFdD8NpeE0lZbTYe1//yQ9IAFo
        iDMSW9E/fZY9F1AmzacD2tcJB0sAGto38HJCAVhXzxlePWiphhrhusinXhKA8/MSpc9Ohseieq+mBT8U
        8rW2s4m+KQFo6CSBTQkE4NxneHfXXGn0xziqBWwOAPg2uTv2AGSdd9Ppc1ofBa+cKWKTAJznzeAnBgXA
        GxQ+orHiuIqeomYSgPPzDuWj5XQGoHaS+rG21kroBxKAhgU/bFQAvN0M+krYDkd7dqALAQB9V/mQWb0B
        8CaGG7S1uOVL21okAPXwttg2e2X5nqP8SVubOfQPEoCGeKPSlm/9AfCK2FZrarOa/jmq9QF3AgDqRu8a
        FQCvnF3XFZ2I6hOSLgUA1IGWRl4tEOzDkRn0Z03tfsBxkgA0yAtpjuKRbXoD4H0FYaOmln8TxXdEAwVg
        jPkB8I6WGUl/MygA3rfK9YxOSumeKAIwJkgAqs0PgMdMejOyR0FWiOvpremV9ZbAH8ltkNW4138ARtsS
        APC06UdKR7frDQBogKaagTn6AzDafwBGocqWAHjsQ29HsBE8K+TV3KVljeBj3YvEVRjpPwB32xUA7z7w
        mOZV+vABAI1TPFK2FrN1B+Bu/wEYhkq7AuDxm/SvWk8EylIYnj6hdKZ4LTbrPVm4kl31jaGosC8AnvB9
        aBkVaQrAdKU9ztnKD6VT1E+nOhW4w38ABqHMxgDUSv8d+nf6VEMAHla6jlRaqPRhCa8g/fs6lSljV31j
        AEptDUBtsUZvekFxrb6c7lAel7yiGMFHdapSiv7+A3ATSmwOQC270GR6N/QDYRd1Ur6CdvRbhbtAJc8n
        NOpRwq76xg0otj8AtS+Mb6S5tJY+C1yfM17T7OT50MPB7XpfBhWzq75xLQrdCEAtW1NPeoSW0jYeGzQ8
        NCujv9K92ir0WtBDoV5YH6A79apQyK76RjcUuBSAv88R0ulaGkWz+Ma8irbSPjrK08YT/JAo5P8eoT30
        Pv2e5tNQ7R926UIzaR0d5HaKG2QhX9U2HkD21N3/AlzjPwBdcMi9ANRlS34+d6IrqTt9i67nWGTyvztS
        Gx4+RncXyqDrqFeD7MlXEslnpQ+xq77RCfvcDkAj5D521TcuwS6RzDHuYld9oy22iGSOcTO76hupWCeS
        Oca17KpvtMBKkcwxrmRXfaMpXhPJHOOr7GoALBbJHONiBEK2SOYYs4MFYLpI5hinARcGCMADNhSGC32z
        BvcDzQMEYAjKRTaHWI7BwR4BvVAksjnEInY0ELq6vhzUyBhoKcjDRdghsjnEHexoILTCGpHNIa5hRwOh
        CZaJbA5xGTsKeRXUeDkPgTFeZHOIDwUPwEC79wYI67AUA4IH4CocEekc4RFcGTwA7bBZpHOEgaqB/o5m
        yBHpHOFydjME5op0jnAuQmGEjacECL/CSnYyFDJd3B/UCFnAToZCG2wU+RzgRnYyJJaIfA5wCUJjnNQF
        Wc8adjE0euCYSGg5j7GLodEaa0VCy7mWXVTAPJGw8a0Dnn1cVImIaDFLwiwD1UV7WRGwmu+zg4pYIDJa
        zAVQRj8pELeWReyeMlKRK1JayneCnAlwbkyw5+sBwjqsxnhoQQfsFDkt5A52ThNmiZwWcha0oQv2iKCW
        cU/QzWDnx2yR1DLOhlZcJnsFLXv+f0Ob92cKyiZKgZg1rGS3vnBOE9KwQqS1hG+xWxGgNw6LuBbwMDul
        G2eOmJsqjwELbv9T6zimGamyadx4LtPz+vfcs4E8Edlg5rFDUeHMIWPfwm4R2lDuZncQ7Di4MBiI/SK2
        gdzPzsSEIRIBA+0fghhxK/JFdIOYz47EjF7YIMIbwg1Bj4HUg8541bbPzDvIKnahMxJCa8yQHcSJsoAd
        aF17rl9SuAm5UjKWUMlXLm6uNeECJIm2eBx/E0NiH/ZNCXPyTzRrBF7N0AIcEFti4gE8g64wDt04BHvF
        noi5l83PhLG4AtOwHqfFqAhYijxMRwaMRxvcjkXYJd8c0cYKfISXWNW2sAgdMBwLsQUnxUAFnsRW/jEN
        11fhHzfS0ZdvW6/jQxSLnYGM34XlyEI/VtABNMPX0AcT8AJW8YTxhLw/PMc7vSKe3K3Gi5iIG1mxOqd7
        ptjs/lnvqFL4ZnY9RmAGfoUV/ID4BIX4vJEeRVWDMv4xfMIqrGQ1nsRI9GJ1UtBo0BztcDmuw224jx8T
        8/EycpCLDdjOU52DKGBxTvHItxyV/NuosdDeKr7ycu7BKe7JMRziXm3n3q3CG9zTBdzj+zEIPdGZVWgB
        wZn3Si2Rxk+9jjzZ6cbi9EV/DMYwjMJYPIjxmIRHMRlTmNMMpHddk/kKJ/GVPshXPIqvfDD3oC/3JBNd
        uFfp3LuW4Q5uFggEAoFAIBAIBAKBQCAQCASC8Phf3rZTV5TQw38AAAAASUVORK5CYII=
</value>
  </data>
</root>